---

- set_fact:
    base_image: "freebsd-14.2-ocaml-{{ version.split('.')[:2] | join('.') }}"
  when: version != "busybox"

- set_fact:
    base_image: "busybox"
  when: version == "busybox"

- name: Check for existing base image {{ zfs_pool }}/base-image/{{ base_image }}
  shell: zfs list -H -o name {{ zfs_pool }}/base-image/{{ base_image }}
  register: zfs_check
  failed_when: zfs_check.rc > 1

- name: Delete existing base image {{ zfs_pool }}/base-image/{{ base_image }}
  shell: zfs destroy -R -r {{ zfs_pool }}/base-image/{{ base_image }}
  when: zfs_check.rc == 0

- name: Create target for base image {{ zfs_pool }}/base-image/{{ base_image }}/rootfs
  shell: zfs create -p {{ zfs_pool }}/base-image/{{ base_image }}/rootfs

- name: Copy the bsdinstall answer script
  copy:
    src: jail
    dest: jail

- name: Install FreeBSD in jail /{{ zfs_pool }}/base-image/{{ base_image }}/rootfs
  shell: bsdinstall -D jail.log script jail /{{ zfs_pool }}/base-image/{{ base_image }}/rootfs

- name: Fetch and install OS updates for the jail
  shell: freebsd-update -b /{{ zfs_pool }}/base-image/{{ base_image }}/rootfs fetch install

- name: Upgrade pkg
  shell: pkg --chroot /{{ zfs_pool }}/base-image/{{ base_image }}/rootfs install -y pkg

- name: Upgrade pkg packages
  shell: pkg --chroot /{{ zfs_pool }}/base-image/{{ base_image }}/rootfs upgrade -f -y

- name: Create OS setup script /{{ zfs_pool }}/base-image/{{ base_image }}/rootfs/root/freebsd.sh
  copy:
    dest: "/{{ zfs_pool }}/base-image/{{ base_image }}/rootfs/root/freebsd.sh"
    mode: u+rwx,g+rx,o+rx
    content: |
      #!/bin/sh
      pw groupadd opam -g 1000
      pw useradd -m -n opam -g opam -u 1000 -h - -c {{ user_name }}
      pkg install -y sudo gmake git patch rsync bash zstd pkgconf
      echo "{{ user_name }} ALL=(ALL:ALL) NOPASSWD: ALL" > "/usr/local/etc/sudoers.d/{{ user_name }}"

- name: Run script in jail /{{ zfs_pool }}/base-image/{{ base_image }}/rootfs
  shell: jail -c name=base-image path=/{{ zfs_pool }}/base-image/{{ base_image }}/rootfs host=inherit ip6=inherit ip4=inherit mount.devfs command=/root/freebsd.sh

- name: Unmount devfs
  shell: umount -f /{{ zfs_pool }}/base-image/{{ base_image }}/rootfs/dev

- name: Create setup script
  copy:
    dest: "/{{ zfs_pool }}/base-image/{{ base_image }}/rootfs/home/{{ user_name }}/freebsd-ocaml.sh"
    mode: u+rwx,g+rx,o+rx
    content: |
      #!/bin/sh
      cd /home/opam
      touch .hushlogin
      sed -i "" 's/^[^#]*fortune/# &/' .profile .login
      echo "OPAMCONFIRMLEVEL=unsafe-yes; export OPAMCONFIRMLEVEL" >> .profile
      git config --global user.email "you@example.com"
      git config --global user.name "Your Name"
      curl -s https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh -o install.sh
      chmod +x install.sh
      for version in 2.1.6 2.2.1 2.3.0 2.4.1 dev ; do
        if [ "$version" = "dev" ] ; then
          ./install.sh --dev --download-only
        else
          ./install.sh --version $version --download-only
        fi
        chmod a+x opam-*
        sudo mv opam-* /usr/local/bin/opam-"${version%.*}"
      done
      rm install.sh
      sudo ln -f /usr/local/bin/opam-2.1 /usr/local/bin/opam
      cd /home/opam
      git clone https://github.com/ocaml/opam-repository.git
      opam init -k git -a ./opam-repository -c {{ version }} -y
  when: version != "busybox"

- name: Run freebsd-ocaml.sh script in jail /{{ zfs_pool }}/base-image/{{ base_image }}/rootfs as user {{ user_name }} for {{ version }}
  shell: jail -c name=base-image path=/{{ zfs_pool }}/base-image/{{ base_image }}/rootfs host=inherit ip6=inherit ip4=inherit mount.devfs exec.jail_user=opam command=/home/opam/freebsd-ocaml.sh
  when: version != "busybox"

- name: Unmount devfs
  shell: umount -f /{{ zfs_pool }}/base-image/{{ base_image }}/rootfs/dev
  when: version != "busybox"

- name: Create a snapshot of the base image
  shell: zfs snapshot -r {{ zfs_pool }}/base-image/{{ base_image }}@snap

- name: Clone if it is the default
  when: default == true
  shell: |
    zfs clone -p {{ zfs_pool }}/base-image/{{ base_image }}@snap {{ zfs_pool }}/base-image/freebsd
    zfs clone -p {{ zfs_pool }}/base-image/{{ base_image }}/rootfs@snap {{ zfs_pool }}/base-image/freebsd/rootfs
    zfs snapshot -r {{ zfs_pool }}/base-image/freebsd@snap

